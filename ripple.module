<?php

// Permissions
define('RIPPLE_PERM_ADMINISTER', 'ripple__administer');

// Menu API
define('RIPPLE_PATH_ADMIN', 'admin/config/ripple');
define('RIPPLE_PATH_ADMIN_ARGS', 3);

// Variables
define('RIPPLE_VAR_REST_URL', 'ripple__rest_url');
define('RIPPLE_VAR_REST_VERSION', 'ripple__rest_version');
define('RIPPLE_VAR_ACCOUNT', 'ripple__account');
define('RIPPLE_VAR_CURRENCY', 'ripple__currency');

function ripple_menu() {
  $items = array();

  $admin_item = array(
    'access arguments' => array(RIPPLE_PERM_ADMINISTER),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ripple.admin.inc',
    'file path' => drupal_get_path('module', 'ripple'),
  );

  $items[RIPPLE_PATH_ADMIN] = array(
    'title' => 'Ripple',
    'description' => 'Ripple payments settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ripple_admin_settings_form'),
  ) + $admin_item;

  return $items;
}


function ripple_json_decode($json) {
  // Because most Drupal APIs work with arrays, let's keep it consistent and parse json to array as well.
  return json_decode($json, TRUE, 512, JSON_BIGINT_AS_STRING);
}

function ripple_http_parse_response($response) {
  if (is_object($response) && !empty($response->data)) {
    $data = ripple_json_decode($response->data);
  }
  elseif (is_object($response) && !empty($response->error)) {
    throw new Exception($response->error, $response->code);
  }
  else {
    // @todo Is this ever reached?
    //dpm(func_get_args(), __FUNCTION__);
  }
  return $data;
}

function ripple_http($url, array $options = array()) {
  try {
    $response = drupal_http_request($url, $options);
    return ripple_http_parse_response($response);
  }
  catch (Exception $e) {
    throw new Exception(t('Failed to reach %url (%msg).', array(
                            '%url' => $url,
                            '%msg' => $e->getMessage(),
                          )), $e->getCode());
  }
}


function ripple_rest($path, array $options = array()) {
  // Defaults
  $options += array(
    'server' => variable_get(RIPPLE_VAR_REST_URL, 'http://localhost:5990'),
    'version' => variable_get(RIPPLE_VAR_REST_VERSION, 'v1'),
    'query' => array(),
  );

  $url = $options['server'] . '/' . $options['version'] . '/' . $path;

  return ripple_http($url, array('query' => $options['query']));
}